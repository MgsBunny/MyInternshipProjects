
Design Choices:
1. Tkinter for GUI: Tkinter is a standard GUI library for Python. It's easy to use and suitable for small to medium-sized projects.
2. Start Screen: A start screen with a "Start Quiz" button is introduced to make the initiation of the quiz more user-friendly.
3. Feedback Display: Feedback for each question is displayed in a separate label, clearly indicating whether the user's choice was correct or incorrect.
* If the answer is incorrect, the correct answer is also displayed, helping the user understand the correct response.
4. Scoring: A running score is displayed to provide immediate feedback on the user's performance.
5. Entry Widget for User Input: Utilized the ttk.Entry widget to allow users to input their answers.
6. Buttons for Interaction: Buttons (ttk.Button) are used for the "Submit" and "Next" actions. They provide a clear way for the user to interact with the application.
7. Error Handling: Incorporated error handling for user input to ensure the application doesn't crash due to invalid inputs.
8. Feedback Labels: Added feedback labels to inform the user whether their answer was correct or incorrect.

Features:
1. Sequential Question Display: Questions are displayed one at a time, and the user progresses to the next question after providing an answer.
2. User Input Validation: Ensures that the user inputs a valid number between 1 and 4 for their choice.
3. Feedback: Provides immediate feedback on whether the user's answer was correct or incorrect.
4. Score Tracking: Tracks the user's score and displays it after each question.
5. Clearing and Disabling: The entry widget is cleared and the submit button disabled after each question is answered to prevent accidental re-submission.
6. End of Quiz Message: Displays a message when the quiz is completed, showing the final score.

Features:
1. Dynamic Question Presentation: Questions and choices are dynamically loaded from the quiz_data list, allowing for easy modification or extension of the quiz.
2. User Input Handling: User input is validated to ensure that the entered option is a valid number between 1 and 4.
3. Clearing and Disabling: The entry widget is cleared and the submit button disabled after each question is answered to prevent accidental re-submission.


Challenges and Solutions:
1. Sensible User Input: We made sure the quiz understands normal numbers between 1 and 4. If you try something strange, it kindly asks you to fix it.
2. Keeping Things Dynamic: As you move from one question to another, the quiz adjusts itself. It's like having a personal quiz assistant!
3. Figuring Out the Score: Scoring is all sorted out. You get a point for every right answer. Your total score is right there on the screen.
4. Feedback that Helps: After each question, it doesn't just say "right" or "wrong." If you miss it, it even shows you the correct answer. It's like learning while you play!

Overall, the design focused on simplicity, usability, and a visually appealing interface for a basic quiz application. It's flexible, as we can add more questions whenever we want. The design choices made here are suitable for a small-scale application like a quiz. For larger projects, more advanced frameworks or libraries can be considered.


